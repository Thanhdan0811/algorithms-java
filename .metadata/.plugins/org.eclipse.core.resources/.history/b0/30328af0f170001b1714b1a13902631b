package sorts;

public class MergeSort {
	private static int[] mergeArr(int arr1[], int arr2[]) {
		int i = 0, j = 0, s = 0;
		int[] rel = new int[arr1.length + arr2.length];
		while(i < arr1.length && j < arr2.length) {
			if(arr1[i] < arr2[j]) {
				rel[s] = arr1[i];
				i++;
			} else if(arr1[i] > arr2[j]) {
				rel[s] = arr2[j];
				j++;
			} else {
				rel[s] = arr2[j];
				rel[++s] = arr1[i];
				i++;
				j++;
			}
			s++;
		}
		while(i < arr1.length) {
			rel[s] = arr1[i];
			i++;
			s++;
		}
		while(j < arr2.length) {
			rel[s] = arr2[j];
			j++;
			s++;
		}
		return rel;
	}
	private static int[] sliceArr(int arr[], int s, int e) {
		int rel[] = new int[e - s];
		for(int i = 0; i < rel.length; i++) {
			rel[i] = arr[s];
			s++;
		}
		return rel;
	}
	public static int[] mergeSort(int arr[]) {
		if(arr.length <= 1) return arr;
		int divideMid = arr.length / 2;
		int leftArr[] = mergeSort(sliceArr(arr, 0, divideMid));
		int rightArr[] = mergeSort(sliceArr(arr, divideMid, arr.length));
		return mergeArr(leftArr, rightArr);
	}
	
	public static void main(String args[]) {
		int arr[] = {1,2,4,5,2};
		int result[] = mergeSort(arr);
		System.out.println("result merge sort : ");
		for(int i = 0; i < result.length; i++) {
			System.out.print(result[i] + ", ");
		}
	}
}
